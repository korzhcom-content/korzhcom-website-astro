[{"slug":"typescript-webpack-aspnetcore","title":"Using TypeScript with WebPack in ASP.NET Core projects","description":"Suppose you work on ASP.NET Core web application that solves some business-related tasks. You know, a few forms where users enter their data and get some reports. Although such a project may not require any complex logic on the client, you still probably need to write some JavaScript code to make user interaction with your application more convenient and enjoyable","date":"2022-04-19T00:00:00.000Z","body":"## Motivation\r\n\r\nSuppose you work on ASP.NET Core web application that solves some business-related tasks. You know, a few forms where users enter their data and get some reports. Although such a project may not require any complex logic on the client, you still probably need to write some JavaScript code to make user interaction with your application more convenient and enjoyable. For example, you may need a simple prompt popup on item deletion since it's not quite right to use a separate page for that. Or, you want to do client-side validation. Or ... it really can be any other client-side task, you name it.\r\n\r\nOf course, you can add a few lines of script on each page (with vanilla JavaScript or using the good old JQuery) but it is really hard to maintain all these small pieces when your project gets bigger. Moreover, some of these pieces do the same things, so you either need to replicate them in many places (bad decision) or you end up creating a small library that contains all client-side functions, structures, and classes used in your project.\r\n\r\nThis article describes how to create such a JS library for your ASP.NET Core project with minimal effort and in a way that will provide better support for further changes.\r\n\r\n## Solution\r\n\r\nLong story short, we are going to put all our client-side code to separate files (with classes, functions, data structures) and then bundle them with the help of WebPack 5. The resulting script can be included right into your _Layout.cshtml (so, it will be available on all pages of your web app) or you can include it only on the pages where it's necessary.\r\n\r\nMoreover, we will use TypeScript instead of pure JavaScript because, you know, static typing is good and it allows us to catch a lot of errors at compile time.\r\n\r\nIn addition, you can consider this article as a quick introduction to client-side development. Especially if you are a .NET developer who still tends to stay backend-only and who is afraid of all that fancy client-side stuff (as I was some time ago).\r\n\r\n## Getting started\r\n\r\nHere we will describe the steps necessary to set up the configuration for bundling a small TypeScript library with your own code. For the sake of simplification, this library will contain just one function for now.\r\n\r\n### 0. Install Node.JS\r\n\r\nI'm pretty much sure you already have it installed. In case you don't - please do it. We will need Node.JS version 10.13.0 (or newer) on your dev/build machine.\r\n\r\n### 1. ClientScript sub-folder\r\n\r\nWe will put all our scripts and configuration files into a separate sub-folder ClientScript of your main project's folder. It's similar to ClientApp sub-folder used in most of the SPA (single page application) templates available for ASP.NET Core.\r\n\r\n### 2. Add configuration files\r\n\r\nWe will need 3 configuration files:\r\n\r\n- package.json - to define our bundle and all dependencies,\r\n- webpack.config.js - for WebPack configuration\r\n- tsconfig.json - for TypeScript settings.\r\n\r\nFor now, you can just copy these files as-is. We will describe each of them later.\r\n\r\n*package.json*\r\n```json\r\n{\r\n  \"name\": \"myapp-client-bundle\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"This is client-side scripts bundle for MyApp\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"build\": \"webpack --mode=development\",\r\n    \"build:prod\": \"webpack --mode=production\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"ts-loader\": \"^9.2.5\",\r\n    \"typescript\": \"^4.4.3\",\r\n    \"webpack\": \"^5.52.1\",\r\n    \"webpack-cli\": \"^4.8.0\"\r\n  },\r\n  \"dependencies\": {\r\n  }\r\n}\r\n```\r\n\r\n*webpack.config.js*\r\n```javascript\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.ts',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.tsx?$/,\r\n        use: 'ts-loader',\r\n        exclude: /node_modules/,\r\n      },\r\n    ],\r\n  },\r\n  resolve: {\r\n    extensions: ['.tsx', '.ts', '.js'],\r\n  },\r\n  output: {\r\n    library: {\r\n      name: 'MYAPP',\r\n      type: 'var'\r\n    },\r\n    filename: 'app-client.js',\r\n    path: path.resolve(__dirname, '../wwwroot/js'),\r\n  }\r\n};\r\n```\r\n\r\n*tsconfig.json*\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"./dist/\",\r\n    \"noImplicitAny\": true,\r\n    \"module\": \"es6\",\r\n    \"target\": \"es5\",\r\n    \"allowJs\": true,\r\n    \"moduleResolution\": \"node\"\r\n  }\r\n}\r\n```\r\n\r\n### 3. Add TypeScript files\r\n\r\nFor the sake of simplicity, our library in this initial stage will contain only one function hello() that simply prints Hello world to the browser's console. Here are two files we need for that outstanding :) functionality:\r\n\r\n#### hello.ts\r\nThis file contains our function packed into the funcs namespace, so we will be able to call it as MYAPP.funcs.hello()\r\n\r\n```typescript title=\"hello.ts\"\r\nexport namespace funcs {\r\n    export function hello(): void {\r\n        const message = 'Hello world!';\r\n        console.log(message);\r\n    }\r\n}\r\n```\r\n#### index.ts\r\nThis is our entry point. This TypeScript file will not contain any functions or classes. It will just define which parts of our code (functions, interfaces, classes, etc) we are going to expose to the outside world. Since we have only one file with \"real\" functionality our index.ts will as simple as:\r\n```typescript title=\"index.ts\"\r\nexport * from './hello';\r\n```\r\nand it means that we would to \"reveal\" all public (exported) parts inside our `hello.ts`\r\n\r\n### 4. Build your library\r\n\r\nThat's it. We are ready to build our bundle script. To do so, open your terminal program, move to `ClientScript` folder and run the following 2 commands:\r\n\r\n```shell\r\nnpm install\r\n```\r\nand then\r\n```shell\r\nnpm run build\r\n```\r\n\r\nThe first one will install all necessary NPM libraries (the ones which are listed in the `dependencies` and `devDependencies` sections of your `package.json`). You will need to run it before the first build and then only when you add a new dependency (another NPM package) to your `package.json`.\r\n\r\nThe second command actually runs WebPack that compiles (or, to be more correct, \"transpiles\") your TypeScript files to JavaScript, then bundles all JS code into one file `app-client.js` and puts that file into `wwwroot/js` folder of your web project as defined in `webpack.config.js` configuration file.\r\n\r\nAccording to the `output/library` section of that file, all functions or structures of your new bundle will be accessible via the `MYAPP` global variable.\r\n\r\n### 5. Attach the final script to your app\r\nTo use our script you just need to include it on your page as any other JS file:\r\n```html\r\n<script src=\"/js/app-client.min.js\"></script>\r\n```\r\nYou can add that line either to the `_Layout.cshtml` (to make it available on all pages of your web application) or to the view or Razor page where it's necessary.\r\n\r\nNow you can call the function(s) from our new JS library:\r\n```html\r\n<script>\r\nMYAPP.funcs.hello();\r\n</script>\r\n```\r\n\r\n## Configuring the scope\r\n\r\nOne of the great features of using TypeScript and WebPack is organizing your code in modules and then combining those modules into namespaces using WebPack's configuration and TypeScript's `namespace` structure.\r\n\r\nThere are several possible options.\r\n\r\n### 1. Use module names and their aliases\r\nYou can put functions and classes in a module and export that module either \"as-is\" or with an alias.\r\n\r\nFor example, if we have the following module:\r\n```typescript title=\"dialogs.ts\"\r\nexport class Dialog {\r\n    ...\r\n}\r\n\r\nexport function showDialog() {\r\n    ...\r\n}\r\n```\r\nand we use this export declaration in our `index.ts`:\r\n```typescript\r\nexport * from './dialogs';\r\n```\r\nthen our `Dialog` class and `showDialog()` function will be available right under `MYAPP` namespace as `MYAPP.Dialog` and `MYAPP.showDialog()`.\r\n\r\nYou can also specify an alias for that `dialogs` module:\r\n```typescript\r\nexport * as dlg from './dialogs';\r\n```\r\nNow our class and the function will be accessible as `MYAPP.dlg.Dialog` and `MYAPP.dlg.showDialog()` correspondingly.\r\n\r\n### 2. Using namespace clause\r\n\r\nYou can also use the namespace clause and then re-export the imported modules, so all functions, variables, and types that belong to the same namespace even in different modules will be merged together.\r\n\r\nFor example, we have the following two modules:\r\n\r\n```typescript title=\"dialogs.ts\"\r\nexport namespace ui {\r\n    export class Dialog1 {\r\n        ...\r\n    }\r\n\r\n    export function showDialog1() {\r\n        ...\r\n    }\r\n}\r\n```\r\nand\r\n```typescript title=\"widgets.ts\"\r\nexport namespace ui {\r\n  export class Widget1 { ... }\r\n\r\n  export function renderWidget1() { ... }\r\n}\r\n```\r\nw, if we place the following two lines in our `index.ts` module:\r\n```typescript\r\nexport * from './dialogs';\r\nexport * from './widgets';\r\n```\r\nwe will be able to access all those exported functions and classes under the `MYAPP.ui` namespace. For example: `MYAPP.ui.renderWidget1()`.\r\n\r\n## Using third-party libraries\r\n\r\nMaybe the most significant advantage of this setup (that may seem a little complicated for just a \"hello world\" function) is the possibility to use any third-party JS library from hundred of thousands available on NPM repository.\r\n\r\nAs an example, we slightly modify our `hello()` function so that it will take a parameter `name` and will print the phrase `Hello, {name}` to the console. Before printing, the string stored in the name variable will be capitalized with the help of `capitalize()` function from the well-known `lodash` library.\r\n\r\nHere are the steps we should take to achieve this goal:\r\n\r\n### 1. Add lodash library to your package.json\r\n\r\nJust open a terminal inside your ClientScript folder and type:\r\n```shell\r\nnpm install lodash\r\n```\r\nAs the result of this operation, you will see something like the following in the dependencies section of your package.json file:\r\n```json\r\n\"dependencies\": {\r\n    \"lodash\": \"^4.17.21\"\r\n}\r\n```\r\n(the actual version number can be different).\r\n\r\n### 2. Import lodash functions in your hello.ts file\r\n\r\nAdd the following line at the beginning of hello.ts:\r\n```typescript\r\nimport * as _ from 'lodash';\r\n```\r\n\r\n### 3. Modify hello() function\r\n\r\nNow we can use all lodash library functions using _ global variable (this is the default way of using lodash functions since the times it was not an NPM library). So, our hello function will look the following:\r\n\r\n```typescript\r\nexport function hello(name : string): void {\r\n  const message = 'Hello, ' + _.capitalize(name);\r\n  console.log(message);\r\n}\r\n```\r\nAdditionally, we will modify the function call on our page:\r\n```html\r\n<script>\r\nMYAPP.funcs.hello('sergiy');\r\n</script>\r\n```\r\nWhen we rebuild our script (npm run build), run the app, and open the main page, we will see the following string in the console panel of our browser:\r\n```\r\nHello, Sergiy\r\n```\r\n\r\n## Watch mode\r\nIt's unnecessary to run the build command each time you change something in your script or add a new package to your project. Instead, you can use the watch mode once, and WebPack will re-build your project every time something was changed:\r\n\r\n```shell\r\nnpm run watch\r\n```\r\n\r\n## Conclusions\r\n\r\nAs we can see, using TypeScript with WebPack to build vanilla JS client-side scripts for your ASP.NET Core projects has a lot of benefits:\r\n\r\n- Strong-typed TypeScript code with all advantages of the latest JavaScript features: classes, arrow functions, modules, scopes, and promises.\r\n- Better support by code editors (like Visual Studio Code) with syntax highlighting, IntelliSense, etc.\r\n- A possibility to use 3-party libraries with typing definitions.\r\n- More compact and optimized JS 5 code generated by WebPack.\r\n- Hot reload of the changes you make in the code editor.\r\n- Better debugging experience (I'm going to write a separate article about it). It's possible to debug your original TypeScript code instead of minimized JS code available for your web app.\r\n\r\nThere is one more note. We used WebPack in this article since it's the most popular module bundler for now. However, I believe that we can quickly get the same results with any other bundler like Browserify, Parcel, or Rollup.\r\n\r\nPlease let me know (via my Twitter account @korzhs or here in the comments) if this article was valuable and informative for you.\r\n\r\nHappy coding!"},{"slug":"asp-net-core-default-project-structure-explained-part-1","title":"Single-file web API services with .NET 5 and ASP.NET Core","description":"When you start learning a programming language, one of your first exercises will probably be to write a “Hello World” application to figure out the basic concepts","date":"2021-05-23T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport newProjectImage from \"../../images/blog/create-new-project-dlg.png\"\r\nimport configureProjectImage from \"../../images/blog/configure-project-dlg.png\"\r\nimport structureProjectImage from \"../../images/blog/default-asp-net-project-structure.png\"\r\nimport infoProjectImage from \"../../images/blog/project-additional-info.png\"\r\n\r\n## Introduction\r\n\r\nWhen you start learning a programming language, one of your first exercises will probably be to write a “Hello World” application to figure out the basic concepts.\r\nThis exercise works well if you’re writing a simple console program that will only print out the greetings on the screen.\r\n\r\nHowever, once you move onto learning to write web apps using a new framework, such as ASP.NET Core, such a simple code is not enough — partially because web apps are more complex.\r\nAnd also because, right off the bat, the tools and frameworks used for writing web apps try to introduce advanced techniques and approaches for building and maintaining them once they scale.\r\n\r\nIt all can seem like too much for a beginner.\r\nHere we will take apart the default ASP.NET Core solution template piece by piece, then figure out the purpose of each piece and how exactly it works.\r\n\r\nPlease note that this isn’t a full-scale tutorial on all the aspects of creating web apps in ASP.NET Core.\r\nRather, it is a short guide where you can check why a particular part is added to your project or find a piece of code and a link to the relevant documentation that explains it in detail.\r\n\r\nAs an example, I used a new solution that targets .NET 5.\r\nHowever, most of this article's information will also be relevant for the ASP.NET Core projects that target .NET Core 3.1 or the upcoming .NET 6.\r\n\r\n## Creating a New Web Project\r\n\r\nLet’s start with creating a new empty web app with the “Create a new project” wizard in Visual Studio.\r\n\r\nHere is how this step should look:\r\n\r\n<Image src={newProjectImage} alt=\"Create new project dialog in Visual Studio\" />\r\n\r\nWhen you press Next, the wizard will ask you to choose the names of the new solution and project and the folder to place the solution files in:\r\n\r\n<Image src={configureProjectImage} alt=\"Configure new project dialog in Visual Studio\" />\r\n\r\n\r\n> __Tip #1__: Place the project and the solution into separate folders. Choosing the same location for both is convenient only for very small applications. Once you start adding other layers to your solution (domain classes, data layers, API, etc.), having them in separate projects will be more practical.\r\n\r\n> __Tip #2__: Use the general name of your application for the name of the solution (like “MyCoolApp”) and add the “.Web” suffix for the project name (e.g., “MyCoolApp.Web”).\r\n\r\n<div id=\"projectCreationFinalStep\">\r\n    Finally, you will need to choose some additional project options.\r\n\r\n    <Image src={infoProjectImage} alt=\"Additional information for the new project\" />\r\n\r\n    The most important options here are:\r\n\r\n    * __Target Framework__. I suggest selecting the latest one (for the moment), .NET 5, but all the information in this article is relevant for .NET Core 3.1 or .NET 6 (it’s in the pre-release state now) projects as well.\r\n    * __Authentication Type__. In this article, we suppose this option is set to *Individual Accounts*. This value means that our new web project will contain some means for managing user accounts and provide UI for the basic authentication operations: Login, Registration, Reset Password, etc.\r\n\r\n    Let's click on \"Create\" when everything is set and get our new solution.\r\n</div>\r\n\r\n## Project Structure\r\n\r\nAfter finishing the steps described above, you will get a new solution with one project inside it.\r\n\r\nThe structure of that project will look similar (or even the same) to the following one:\r\n\r\n<Image src={structureProjectImage} alt=\"Default ASP.NET Core project structure\" />\r\n\r\nLet’s take a closer look at each part of your new project.\r\n\r\n\r\n### 1. Connected Services\r\n\r\nThis is the first node in your project’s structure and possibly the less-used one.\r\nIt is intended to automate the multiple steps necessary to connect a project to an external service (like Azure Storage or Application Insights).\r\nYou can right-click on this node and select “Add connected service…” to run a wizard that will lead you through the process.\r\nUsually, it just adds necessary packages and gives you basic instructions on how to start using your app's service.\r\nAs I’ve already mentioned, there is a good chance you will not use this node during your project’s lifetime.\r\n\r\n\r\n### 2. Dependencies\r\n\r\nThis element of your project structure contains all packets or other projects on which your project depends.\r\n\r\nThere are four main folders inside this node:\r\n\r\n* __Analyzers__\r\nThey help you make your code better: cleaner, error-free. Each analyzer checks that your code satisfies a list of rules incorporated in it. If any part of your code does not apply to one of the rules, you will see either a Warning or an Error while you build your project.\r\n\r\nPlease note that analyzers work only at compile time and do not affect your resulting application.\r\n\r\n* __Frameworks__\r\nThis folder contains a list of frameworks your project depends on. This information is important if you [publish your web app as a runtime-dependent](https://docs.microsoft.com/en-us/dotnet/core/deploying/) (as opposed to a self-contained one). In this case, all the frameworks listed here must be installed on the server where you will run your app.\r\n\r\n> NB: You can use `dotnet --info` console command to check the list of installed frameworks.*\r\n\r\n* __Packages__ This is the main item in this node. It lists all NuGet packages you added (installed) to your project. If any of those packages depend on other packages, they will be installed automatically and listed as sub-nodes of the root-level packages. You can remove each installed package here (right-click / Remove).\r\n* __Projects__ This is the list of other projects in this solution your current project depends on.\r\nYou can reference other projects using the “Add reference” command from the right-click menu.\r\nObviously, this node is empty now since we have only one project in the solution.\r\n\r\n\r\n### 3. Properties\r\n\r\nThis part contains different properties of your project that you can modify by double-clicking on this node in the Solution Explorer. Most of the properties there affect the compile- and debug-time behavior of your project.\r\n\r\nThe only item inside this node is a “launchSettings.json” file containing the launch profiles. Each profile defines how to run your project when you click on the “Run” button in Visual Studio.\r\n\r\n### 4. wwwroot\r\n\r\nThis folder contains all the static files of your web application: CSS files, JavaScript files, images, and icons.\r\nAs you might figure out from its name, this will be the root folder of your web app.\r\nSo if you put an “image1.png” file into the “wwwroot/images/dir1” folder, it will be accessible in the browser by the “/images/dir/image1.png” address.\r\n\r\n### 5. Areas\r\n\r\nThis folder is added because we selected the “Individual Accounts” value for the “Authentication Type” option when created the project.\r\n\r\nIn addition to the core authentication/authorization packages (which is called ASP.NET Core Identity), the default template also adds the “Microsoft.AspNetCore.Identity.UI” package. This is a Razor-class library that contains all forms and partial views for authentication and user management: Login, Registration, Reset Password, User Profile, and many others.\r\nAll these forms will use your layout (defined in *Pages/Shared/_Layout.cshtml*) and so will match your website’s design.\r\n\r\nHowever, you still might want to change some of those forms (or even all of them).\r\nIn this case, you can use the Scaffold command and add the necessary files to your project. The scaffolded files will be added to the *Areas/Identity* folder.\r\n\r\n### 6. Data\r\n\r\nAs in the previous case, this folder appears in our new project because of the “Authentication Type” option that was turned on at the beginning.\r\n\r\nBy default, all user-related information (users, their roles, claims, etc.) is stored in a database accessed with [Entity Framework Core](https://docs.microsoft.com/en-us/ef/core/) ORM (object-relational mapping) framework. If you are not familiar with EF Core, you can find a lot of tutorials on [Microsoft Docs](https://docs.microsoft.com/en-us/ef/core/get-started/).\r\n\r\nThe “Data” folder contains your DB context class named “ApplicationDbContext.” This class is derived from the “IdentityDbContext” class defined in the “Microsoft.AspNetCore.Identity.EntityFrameworkCore” assembly, and it includes all DB sets (tables) necessary to store user-related information.\r\n\r\nYou can use this class or create another DbContext class to add your models.\r\n\r\nAdditionally, the “Data” folder also includes “Migrations” sub-folder with all your Entity Framework Core migrations.\r\n\r\n### 7. Pages\r\n\r\nThis folder contains all pages (forms) of your web applications. ASP.NET Core has two default approaches for content rendering: MVC (Model View Controller) and [Razor Pages](https://docs.microsoft.com/en-us/aspnet/core/razor-pages) (which is, actually, a kind of MVC, where each controller and the corresponding view are stored together). Both approaches use [Razor syntax](https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor) that you can think of as HTML + C#.\r\n\r\nEach Razor page is represented by a “.cshtml” file. The code related to it is stored in a so-called “code-behind” file with the same name and a “.cshtml.cs” extension.\r\n\r\nFrom the start, the “Pages” folder contains a few default pages, such as Index (the home page of your web app), Privacy, and Error. Additionally, you can find the main layout file (_Layout.cshtml) and some partial views in the “Pages/Shared” folder.\r\n\r\n__NB__: It’s a common practice to prefix the names of the layouts and partial views with `_` symbol.\r\n\r\n### 8. Root Folder Files\r\n\r\nNow, when we’ve looked over all the main folders created with the default ASP.NET Core application template, let’s take a closer look at the files stored in the project’s root folder. They are the most important part of the project.\r\n\r\n#### Program.cs\r\n\r\nThis file defines the “Program” class with one static method, “Main,” which is the entry point of your web application.\r\n\r\nThe only purpose of this method is to define the [host](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/?view=aspnetcore-3.1#host) and then pass the control to the Startup class. For more information about the default host builder, look at an article about [Generic Host](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host) on Microsoft’s Docs.\r\n\r\n#### application.settings\r\n\r\nThis is a JSON file that stores the application’s settings. The settings have a hierarchical structure and can be accessed with the Configuration object defined in the Startup class or in any other place of your program where you injected IConfiguration service. For example:\r\n\r\n```csharp\r\nvar defaultLogLevel = Configuration.GetValue<string>(\"Logging:LogLevel:Default\");\r\n```\r\n\r\nThe different levels of hierarchy are separated by the colon (`:`) symbol.\r\n\r\nBy default, in addition to “application.settings”, the ASP.NET Core template also includes an “application.Development.settings” file.\r\nThe settings defined in this file are loaded only into the Development environment and are not available in production.\r\nTo learn more about the “.settings” files and configuration in ASP.NET Core projects in general, please read [this article](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/) on Microsoft’s Docs.\r\n\r\n#### Startup.cs\r\n\r\nThis is the final part of the ASP.NET Core project’s structure. The “Startup” class serves three main purposes:\r\n\r\n* It performs all initialization tasks (setting application-wide constants, DB seeding, migrations, etc.).\r\n* It registers all services used in this project in the [DI (dependency injection) container](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection).\r\n* It defines the [middleware pipeline](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) of your web-application.\r\n\r\nThis class contains a lot of code (as for a project that has just been created) from the beginning and will become even bigger when you start adding new features to your application.\r\n\r\nWe will take a look at it in more detail in the [next article](asp-net-core-project-structure-explained-part2)."},{"slug":"single-file-web-service-aspnetcore","title":"Single-file web API services with .NET 5 and ASP.NET Core","description":"There are many ways to create a web application today. We have a lot of different platforms, frameworks, and libraries: PHP, Python, Java, NodeJS, and a dozen of others","date":"2021-04-15T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport postmanImage from \"../../images/blog/postman-echo01.png\"\r\n\r\n## Introduction\r\n\r\nThere are many ways to create a web application today. We have a lot of different platforms, frameworks, and libraries: PHP, Python, Java, NodeJS, and a dozen of others.\r\n\r\nWhile ASP.NET (Core) was always a good choice for developing enterprise-level web applications (with many complex web pages, some Web API endpoints, static resources, etc.),\r\nit's never been the best choice for creating a small web service with just a few endpoints to handle REST API requests in JSON or plain text formats.\r\n\r\nWell, that was true until .NET 5 was released last year. With support for top-level statements and new features in C# language, .NET 5 allows us to create a solid web service in just a few minutes and with a single code file.\r\n\r\n## Single code file ASP.NET Core web service\r\n\r\nBelow you will find an example of a very basic \"echo\" web service with only one endpoint that just takes the content of a POST request and returns it back in JSON format. Not quite a real-world task of course, but enough for demonstration purposes.\r\n\r\nSo, to create our single-code-file web service just open your terminal, create an empty folder and type the following command:\r\n\r\n```shell\r\ndotnet new web\r\n```\r\n\r\nThis command will create a simple ASP.NET Core project with two code files: `Program.cs` and `Startup.cs`.\r\n\r\nSince our purpose is to get only one file, we remove `Startup.cs`. Yeah, it's that simple.\r\n\r\n\r\nAfter that just copy/paste the following piece of code into `Program.cs` file:\r\n\r\n```csharp\r\nusing System.IO;\r\nusing System.Net.Mime;\r\n\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\n\r\nHost.CreateDefaultBuilder(args)\r\n    .ConfigureWebHostDefaults(webBuilder => webBuilder\r\n        .Configure(app => app.Run(async context => {\r\n            if (context.Request.Path == \"/api/echo\" && context.Request.Method == \"POST\") {\r\n                //getting the content of our POST request\r\n                using var reader = new StreamReader(context.Request.Body);\r\n                var content = await reader.ReadToEndAsync();\r\n\r\n                //sending it back in the response\r\n                context.Response.ContentType = MediaTypeNames.Text.Plain;\r\n                await context.Response.WriteAsync(content);\r\n            }\r\n            else {\r\n                //Return 404 for any other endpoint\r\n                context.Response.StatusCode = StatusCodes.Status404NotFound;\r\n                await context.Response.WriteAsync($\"WRONG ENDPOINT: {context.Request.Path.ToString()}. Use POST request to /api/echo instead\");\r\n            }\r\n        })))\r\n    .Build().Run();\r\n```\r\n\r\nLet's take a closer look what happens here.\r\n\r\n### Top-level statements\r\n\r\nFist we have a block of `using` statement. That's usual for any C# file. Nothing special.\r\n\r\nAfter that, we start straight with an instruction. We call `CreateDefaultBuilder()` method of `Host` class.\r\nIf you've had experience with C# before, you may be a little bit confused by this approach. No namespaces, no class definitions.\r\nYou may even say that this piece of code has the wrong syntax and will not be compiled.\r\n\r\nBut it will. It's possible to do now with C# 9 and it's called [top-level statements](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/top-level-statements).\r\n\r\n\r\n### Creating a host\r\n\r\nAs we already mentioned above the only instruction we actually have in our little program is `Host.CreateDefaultBuilder()` call.\r\nIt creates a [generic host builder](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host) with default settings for logging, configuration, and Dependency Injection container.\r\n\r\n### Setting up the web application\r\n\r\nAfter that, the `ConfigureWebHostDefaults` method loads the configuration, set Kestrel as the webserver, enables IIS integrations, and adds some default middlewares.\r\n\r\nFinally, we call `Configure` method to set up the [middleware pipeline](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/), or, to define the only middleware that will actually process all requests to our web service (with that `app.Run(...)` call).\r\n\r\nThe next piece of code is self-explanatory. If it's a POST request to `/api/echo` we read the content of the request's body and just write it back to the response stream. Otherwise, we return the 404 code with some error message.\r\n\r\nAs I mentioned above, this is a very basic example of a microweb service, but I intentionally made it simple to show how everything works in general without going into detail.\r\n\r\n\r\n## Running the app\r\n\r\nTo run this simple web service just type in the terminal (while you are in the project's directory):\r\n\r\n```shell\r\ndotnet run\r\n```\r\n\r\nHere is what you get in response by sending a POST request to /api/echo using [Postman utility](https://www.postman.com/):\r\n\r\n<Image src={postmanImage} alt=\"POST request to /api/echo via Postman\" />\r\n"},{"slug":"crud-asp-net-core-with-easydata","title":"CRUD operations in ASP.NET Core with EasyData library","description":"Implementing CRUD operations in your ASP.NET Core application can be a very tedious and time-consuming task. EasyData helps to add all necessary functionality (and even more) in a matter of minutes","date":"2021-03-31T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport demo1Image from \"../../images/blog/easydata-demo01.gif\"\r\nimport sshot1Image from \"../../images/blog/easydata-sshot01.jpg\"\r\nimport sshot2Image from \"../../images/blog/easydata-sshot02.jpg\"\r\nimport sshot3Image from \"../../images/blog/easydata-sshot03.jpg\"\r\n\r\n## Problem\r\n\r\nOne of the first tasks for most business applications is to implement CRUD (Create, Read, Update, Delete) operations for the main entities the app works with.\r\n\r\nEvery developer faces the following problems as part of solving the task:\r\n\r\n* The creation of CRUD pages and forms is very boring and time-consuming. Believe me, I’ve been there a lot of times.\r\n* If you do it manually, it can be very slow and error-prone (missed fields, forgotten validators, etc).\r\n* Of course, you can use the scaffolding tool provided by Visual Studio.\r\n\r\nHowever, it’s also not a quick process either, because you need to run that tool for each model class.\r\nAs a result, you get many .cs and .cshtml files, which you'll have to edit manually if something in the default behavior or appearance doesn't suit your needs.\r\nIn the event of changes in the model classes, you'll need to update those generated controllers and pages manually\r\nor regenerate the code and forms from scratch for each affected model class.\r\n\r\n* Moreover, even the built-in scaffolding doesn't provide some important, often essential functions such as paging or search.\r\n\r\n## Solution: EasyData library\r\n\r\nTo solve most (if not all) of those problems we created the [EasyData library](https://github.com/KorzhCom/EasyData).\r\nThe main advantage of EasyData is that it employs a declarative approach.\r\n\r\nThe whole process can be split into two main steps:\r\n\r\n1. You “describe” what data (entities and attributes) you want to work with and\r\nhow your application should work with that data (types, constraints, relations between entities, etc).\r\n\r\n2. Based on this information, the EasyData library establishes an API endpoint for CRUD operations and a vanilla JavaScript-based UI\r\nthat lets your users perform those operations via the API.\r\n\r\nThe most wonderful thing here is that when using Entity Framework Core,\r\nall you need for the first step (“describing” the data) is your DbContext.\r\nSimply “feed” it to the library, and EasyData automatically extracts all the information needed to create the API endpoints and CRUD UI.\r\n\r\n## Quick demo\r\n\r\nHere's a small introduction video that shows how EasyData works:\r\n\r\n<img src={demo1Image.src} alt=\"EasyData quick demo\" />\r\n\r\n## Getting Started\r\n\r\nFirst of all, to test EasyData you can open and run one of the [sample projects](https://github.com/korzh/EasyData/tree/master/samples) available in this repository.\r\n\r\nInstalling EasyData to your project takes the following three simple steps:\r\n\r\n### 1. Install EasyData NuGet packages\r\n\r\n* EasyData.AspNetCore\r\n* EasyData.EntityFrameworkCore.Relational\r\n\r\n### 2. Add EasyData middleware in `Startup.Configure`\r\n\r\n```csharp\r\nusing EasyData.Services;\r\n.    .    .    .    .\r\n\r\n    app.UseEndpoints(endpoints =>\r\n    {\r\n        endpoints.MapEasyData(options => {\r\n            options.UseDbContext<AppDbContext>();\r\n        });\r\n\r\n        endpoints.MapRazorPages();\r\n    });\r\n\r\n```\r\n\r\nIn the middleware options, we also specify the type of DbContext object that will be used as the source of the metadata.\r\n\r\n### 3. Set up a catch-all page for all CRUD operations\r\n\r\nIf you're using Razor Pages, add a new page (for example `EasyData.chstml`). If it’s MVC, you'll need a controller and a view.\r\nThis page will \"catch\" all URLs that begin with a certain prefix (`/easydata` by default but it's configurable). So, we use a special catch-all parameter in the route definition (`\"/easydata/{**entity}\"`).\r\n\r\nWe also add EasyData styles and the script file (`easydata.min.js`), which renders the data-management UI and handles all CRUD operations on the client-side.\r\n\r\n```csharp\r\n@page \"/easydata/{**entity}\"\r\n@{\r\n    ViewData[\"Title\"] = \"EasyData\";\r\n}\r\n<link rel=\"stylesheet\" href=\"https://cdn.korzh.com/ed/1.2.2/easydata.min.css\" />\r\n\r\n<div id=\"EasyDataContainer\"></div>\r\n\r\n@section Scripts {\r\n    <script src=\"https://cdn.korzh.com/ed/1.2.2/easydata.min.js\" type=\"text/javascript\"></script>\r\n    <script>\r\n        window.addEventListener('load', function () {\r\n            new easydata.crud.EasyDataViewDispatcher().run()\r\n        });\r\n    </script>\r\n}\r\n```\r\n\r\nThat’s it. Now you can run your web app, open the `/easydata` URL and enjoy CRUD functionality.\r\n\r\nThe result will be something like this:\r\n\r\n#### List view screen for one entity:\r\n\r\n<Image src={sshot1Image} alt=\"List view screen for Orders entity\" />\r\n\r\n#### \"Edit Record\" dialog:\r\n\r\n<Image src={sshot2Image} alt=\"Edit Record dialog\" />\r\n\r\n#### \"Lookup\" dialog (was opened from \"Edit Record\"):\r\n\r\n<Image src={sshot3Image} alt=\"Lookup dialog\" />\r\n\r\n\r\n## How it works\r\n\r\nLet's briefly go over how all this magic works.\r\nAs we mentioned before EasyData takes care of three main things:\r\n\r\n* It collects database metadata.\r\n* It establishes an API for the main CRUD operations.\r\n* It renders UI (again, based on the metadata) and processes all user interactions in that UI.\r\n\r\nLet’s explore all these parts in detail.\r\n\r\n### Metadata\r\n\r\nMetadata is the data about your data: what entities (tables) are stored in your database,\r\nhow they're connected, what attributes (fields) they have, what  the types of attributes are\r\nand what the constraints are with respect to the values we can store in those attributes.\r\n\r\nEasyData collects metadata (in one way or another) and stores it in the instance of `MetaData` class.\r\nThis object contains the list of entities (tables), the attributes (fields) for each entity, the connections between entities,\r\nand some additional information used in API and during UI rendering and processing.\r\n\r\nTo fill the MetaData object, we specify a metadata loader. In the example above, we did it with the UseDbContext call.\r\nSo, the metadata is loaded from a DbConext object. Currently (in version 1.2) this is the only metadata loader available.\r\nIn future versions, it will be possible to load metadata directly from a DbConnection object or perhaps with some other method.\r\n\r\n### EasyData middleware\r\n\r\nEasyData middleware is responsible for establishing a REST API for all CRUD (and not only) operations initiated by the client side.\r\n\r\nTo add the middleware to your pipeline use `MapEasyData` extension function inside `UseEndpoints` configuration delegate:\r\n\r\n```csharp\r\n   app.UseEndpoints(endpoints =>\r\n    {\r\n       endpoints.MapEasyData(options => {\r\n            options.UseDbContext<AppDbContext>();\r\n        });\r\n    }\r\n```\r\n\r\nThis call should be made before `MapMvc` or `MapRazorPages`.\r\nBy default, EasyData middleware is assigned to `/api/easydata endpoint`, but you can change it via the configuration function (action) passed in the parameter.\r\n\r\nThe only thing that's required in order to configure for `MapEasyData` is to tell it where to take the metadata.\r\nCurrently, there's just one option available: getting metadata from a DbContext.\r\nSo, that’s why we add `UseDbContext<AppDbContext>()` call in the example above.\r\nBesides getting metadata, `UseDbContext` also provides our middleware with all the means for performing CRUD operations (via the DbContext object).\r\n\r\n### EasyData UI root page\r\n\r\nThe third part of the EasyData setup process is the page where the CRUD user interface is rendered.\r\nIt must be a so-called \"catch-all\" Razor page or MVC view.\r\nBy default, this page must be opened for any path that starts with the `/easydata/` prefix.\r\n(So, all paths like `/easydata/student` or `/easydata/invoice` must be processed by this page.)\r\n\r\nNB: `/easydata` is the default prefix.\r\nYou can use another name, but in this case, it will be necessary to specify it in the options of our `RootDispatcherView` object.\r\n\r\nOur catch-all page can contain any HTML element of your choice.\r\nHowever, to ensure the visualization and normal operation of the CRUD UI, it must include the following 4 elements:\r\n\r\n* `<link>` element with a reference to EasyData CSS file (`easydata.min.cs`)\r\n* Container (empty `div` element), in which our interface will be displayed.\r\nBy default, it must have the ID `EasyDataContainer`, but this can also be configured with options.\r\n* `<script>` element with a reference to `easydata.min.js`.\r\n* And a small script that creates and launches the `EasyDataViewDispatcher` object on page load.\r\n\r\nAn example of the simplest “catch-all” page you can see in the Getting Started section above.\r\n\r\n## Wrapping up\r\n\r\nCurrently, EasyData can work with .NET Core 3.1 and .NET 5.\r\nObviously, all ASP.NET Core and Entity Framework Core versions that can work with the specified releases of .NET (Core) are supported.\r\nHowever, it won't be a problem to add support for previous versions of .NET Core or even .NET Framework 4.x.\r\nIf anyone needs it, please [submit an issue](https://github.com/KorzhCom/EasyData/issues) in EasyData's GitHub repository.\r\n\r\nEasyData can be a good tool with which to quickly prototype a new project or create a POC (proof of concept)\r\nwhen we already understand what data we'll need but don't want to spend a lot of time on the simplest operations with that data.\r\nHowever, we hope that in time it will be possible to fully use this solution in the production environment.\r\n\r\n\r\nSo, we look forward to hearing from you with any comments or advice you may have. Of course, don't forget to ad a start for the EasyData repository on GitHub, especially if this library helped you and saved some time.\r\n\r\nSo, we look forward to hearing from you with any comments or advice you may have.\r\nOf course, don't forget to add a star for the [EasyData repository on GitHub](https://github.com/KorzhCom/EasyData),\r\nespecially if this library helped you and saved some time.\r\n"},{"slug":"asp-net-core-project-structure-explained-part2","title":"ASP.NET Core default project structure explained (part 2)","description":"As we already mentioned in the first article, the Startup class is the entry point for all initialization codes in your application. Long story short, the Startup defines what your application will do and how exactly it will work","date":"2020-08-10T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport middlewareImage from \"../../images/blog/aspnetcore-middleware-pipeline.png\"\r\n\r\n> This is the second part of the [article](asp-net-core-default-project-structure-explained-part-1), where we take apart the default ASP.NET Core solution template piece by piece and try to explain the purpose of each part and how exactly it works. You can consider it as a reference where you can check why a particular part was added to your project and find a link to the relevant documentation that explains it in detail.\r\n\r\n## Startup class\r\n\r\nAs we already mentioned in the first article, the Startup class is the entry point for all initialization codes in your application. Long story short, the Startup defines what your application will do and how exactly it will work.\r\n\r\nBy default, any Startup class in the ASP.NET Core application includes three main parts:\r\n\r\n* __The constructor__ where you can define some internal variables, set up some configuration settings, or perform application-wide initializations. For example, we suggest our users set here their license keys for our EasyQuery library.\r\n* __ConfigureServices__ method. Here we register all necessary services in the DI (dependency injection) container and define the configuration settings for some of them. In case you are not aware of what Dependency Injection is, here is an article on our blog that explains this concept in simple words.\r\n* __Configure__ method. This is the stage when you set up the middleware pipeline for your project.\r\n\r\nBoth `ConfigureServices` and `Configure` methods are called automatically while the application starts. You just need to define the services and the middlewares there correspondingly.\r\n\r\nNow, let’s take a look at each of these sections more in detail.\r\n\r\n### Startup class constructor\r\n\r\nThe default ASP.NET Core project template contains only the following one line of code in the constructor:\r\n\r\n```csharp\r\npublic Startup(IConfiguration configuration)\r\n{\r\n    Configuration = configuration;\r\n}\r\n```\r\n\r\nIt just saves in the class property the [configuration object](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1)\r\npassed here by the DI container, so we can use it in other methods.\r\nIn the [first article](https://korzh.com/blog/asp-net-core-project-structure-explained-part1),\r\nwe have already considered the configuration mechanism used in ASP.NET Core applications.\r\n\r\n### ConfigureServices method\r\n\r\nAs it was mentioned before, the `ConfigureServices` method contains the function calls that register different application services in the DI container.\r\nThese can be authentication/authorization services, MVC or Razor Pages engine, the classes for working with DB, or any other possible services.\r\n\r\nThe only parameter of the `ConfigureServices` method has `IServiceCollection` type that represents a list of `ServiceDescriptor` items.\r\nEach of those items maps some type (usually an interface) to a particular implementation of this type.\r\n\r\nAccording to the interface, we can use only usual `IList` or `ICollection` functions like `Add`, `AddRange`, `Remove`, and other methods.\r\nHowever, as you have already noticed, `ConfigureServices` contains such calls as `services.AddDbContext`, `services.AddRazorPages`, and similar.\r\nYou may ask, “How is it possible?” The answer is __extension methods__. Each sub-system used in our project (like Entity Framework Core or MVC engine) defines an extension method (sometimes even a few) for the `IServiceCollection` interface to simplify the registration in the DI and configuration of the services available in that sub-system.\r\n\r\n__NB__: Please note that the order of the services you register in the `ConfigureServices` method is not important.\r\nThis method is executed only once upon your application start.\r\n\r\nSo, let's take a closer look at the default ConfigureServices’ content.\r\n\r\n```csharp\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseSqlServer(\r\n            Configuration.GetConnectionString(\"DefaultConnection\")));\r\n    services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)\r\n        .AddEntityFrameworkStores<ApplicationDbContext>();\r\n    services.AddRazorPages();\r\n}\r\n```\r\n\r\nSo, there are only three calls there: `AddDbContext`, `AddDefaultIdentity`, and `AddRazorPages`. Let’s inspect each of them separately.\r\n\r\n#### AddDbContext\r\n\r\nThis method is provided by the [Entity Framework Core](https://docs.microsoft.com/en-us/ef/core/) framework. It registers and configures our database context. The `Action`delegate passed in the parameter allows us to define the parameters of this DbContext. For example, with `UseSqlServer` call, we tell our DbContext to use a particular type of connection (`SqlConnection`) with a particular connection string. The connection string itself is taken from the configuration so it can be easily changed in Development or Production environments. You can find the default connection string in the `appsettings.json` configuration file, which we already analyzed in the [first article](https://korzh.com/blog/asp-net-core-project-structure-explained-part1).\r\n\r\n##### A few words about the “Builder” pattern\r\n\r\nYou may have noticed an interesting way of passing settings for DbContext.\r\nInstead of sending an object with options, we use a procedure (Action) with one-parameter options of the DbContextOptionsBuilder type.\r\n\r\nThat's because, to construct the DbContext settings properly, Entity Framework Core uses the __Builder Pattern__.\r\nThis pattern is helpful when you need to perform several steps to construct some complex objects and simply defining a class or structure is not enough. For example, when you need to call some methods depending on the settings in the configuration.\r\nAs it happens in our case with `UseSqlServer()`.\r\n\r\nThere is one more reason why we use a delegate (function) instead of a plain object.\r\nThere may be a situation when you don't need that service (DbContext) at all.\r\nFor example, your web app has some actions that do not require database access.\r\nThe DbContext object will never be created for such requests, and so, we will not need to set its options.\r\nThe good thing about a delegate is that it can be called exactly when you need to construct the necessary object.\r\n\r\nI paid so much attention to this pattern because it is used quite often,\r\nespecially in the process of registering services in DI (and we will use that for the next function call as well).\r\n\r\n#### AddDefaultIdentity\r\n\r\nThe second function call in the ConfigureServices was added here because of the Authentication option we turned on when creating our project.\r\nIt registers a bunch of services for authentication and authorization tasks such as `IUserStore`, `IRoleStore`, `IPasswordHasher`, `UserManager`, `SignInManager`, and many others.\r\nThe are all part of the ASP.NET Core Identity sub-system.\r\n\r\nThis method also uses the Builder Pattern, but in a slightly different way. Instead of passing the builder in the delegate’s parameter, this function returns an IdentityBuilder object, so you can call other functions with simple chaining.\r\n\r\nThe only function called there is `AddEntityFrameworkStores`.\r\nIt tells ASP.NET Identity where to store all the entities required for auth tasks (users, roles, claims, etc.).\r\nAs the name of the method suggests, we will use our Entity Framework services for these tasks.\r\nThe type of parameter in this method (between `< .. >`) defines the `DbContext` class used to store all auth objects.\r\n\r\n### AddRazorPages\r\n\r\nThe last function call in the `ConfigureServices` adds the services necessary for Razor Pages engine.\r\nIt appears here because of the template we chose at the beginning.\r\nIf we had selected a template with Model-View-Controller approach at that point, we would have had something like `services.AddMvc()` here.\r\n\r\n## Configure method\r\n\r\nThe last method in the Startup class defines the middleware pipeline of our ASP.NET Core program.\r\nIf you don't know what a middleware pipeline is, you might want to learn more about it because it determines how your web application handles HTTP requests.\r\n\r\n<Image src={middlewareImage} alt=\"ASP.NET Core middleware pipeline\" />\r\n\r\nUnlike the services registered in `ConfigureServices` (remember, their order is not important), the order of middlewares defined in `Configure` has crucial significance. As you can see from the picture above, the first defined middleware is called for each request while every next one in the pipeline processes only those requests that were not processed by the middlewares defined before it.\r\n\r\nSo at the beginning of the pipeline, we need to place the middlewares that are necessary for auxiliary tasks (like logging or authentication) and that don’t consume a lot of memory and processing time.\r\n\r\nLet’s take a look at the default implementation of this method for the chosen project template:\r\n\r\n```csharp\r\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n{\r\n    if (env.IsDevelopment()) {\r\n        app.UseDeveloperExceptionPage();\r\n        app.UseDatabaseErrorPage();\r\n    }\r\n    else {\r\n        app.UseExceptionHandler(\"/Error\");\r\n        app.UseHsts();\r\n    }\r\n\r\n    app.UseHttpsRedirection();\r\n    app.UseStaticFiles();\r\n\r\n    app.UseRouting();\r\n\r\n    app.UseAuthentication();\r\n    app.UseAuthorization();\r\n\r\n    app.UseEndpoints(endpoints => {\r\n        endpoints.MapRazorPages();\r\n    });\r\n}\r\n```\r\n\r\nSo, let’s go through the middlewares defined here one by one.\r\n\r\n#### Exception handling and security transport\r\n\r\nThe first lines define different middlewares for Development and Production modes.\r\nIf we are in the Development mode, we define the middlewares that catch all exceptions in the pipeline\r\nand show a special page with extra information about the error (exception message, stack trace, etc.).\r\n\r\nIt's possible to do because (as you can see from the image above) the processing of the request is returned to the first middleware\r\nin the pipeline before being sent back to the client.\r\n\r\nIn the Production mode, we also catch all exceptions and then re-execute the request with the specified path (‘/Error’ in our case).\r\n\r\nThe second call executed only in Production is `UseHsts`. It adds a middleware that implements HTTP Strict Transport Security Protocol.\r\n\r\nThe next in the pipeline is HTTPS redirection middleware (`app.UseHttpsRedirection`).\r\nThe name is self-explanatory. It just redirects all HTTP requests to HTTPS ones.\r\nThese two middlewares (`app.UseHsts` and `app.UseHttpsRedirection` calls) are added because of the __Configure for HTTPS__ option we turned on (actually, it was turned on by default) during the project creation.\r\n\r\n#### Processing static files (UseStaticFiles)\r\n\r\nThe next middleware (added by the `app.UseStaticFiles()` call) takes care of all static files.\r\nSimply put, if the application gets a request for some .js, .css, or an image file (.png, .jpg, etc.),\r\nthis middleware looks for a file with the requested name inside `wwwroot` folder and returns it in response (if the file was found).\r\nIf not, it sends back a response with a 404 status code (“not found”).\r\n\r\nThere are overloads of `UseStaticFiles` that allow us to define another root folder for static files and set some other options.\r\n\r\n#### Routing (UseRouting and UseEndpoints)\r\n\r\nThe next pair of middlewares are, maybe, the most important ones in the pipeline, since they define the routing for all other endpoints in your web app.\r\n\r\nIn simple words, they match a particular request to a particular endpoint, a piece of executable code that handles the request.\r\n\r\nSo, how exactly does it work?\r\n\r\nIn the `Configure` method, we call `app.UseRouting()` to add `EndpointRoutingMiddleware` to our pipeline.\r\n\r\nAfter that, we call `app.UseEndpoints()` to add `EndpointMiddleware` to the pipeline and define the endpoints. Each endpoint is an object that contains (as mentioned above) a delegate (so, a piece of code) that actually handles the request, plus some metadata (like an authorization policy).\r\n\r\nWe can use such extension methods as `MapGet`, `MapPost`, and others to add an endpoint that matches a particular request path or a path template. For example, the following pattern `/something/{path*}`, will be matched for all requests started with `/something/`.\r\n\r\nAdditionally, other services can define their own extension functions that are used to create necessary endpoints. For example, you can use the `MapRazorPages` function for Razor Pages or `MapHub` for SingleR. In our [EasyData library](https://github.com/KorzhCom/EasyData) we defined `MapEasyData` function that adds an endpoint for the API that processes all CRUD operations.\r\n\r\nWhen our web app gets a new request (and it’s not processed by any middleware defined before `UseRouting`), the `EndpointRoutingMiddleware` matches it to some endpoint. So, one endpoint among all defined at the application start is becoming selected at that moment.\r\n\r\nThen `EndpointMiddleware` actually calls the endpoint’s delegate to handle the request.\r\nOther middlewares that are added after `app.UseRouting()` but before `app.UseEnpoints()` can see which endpoint is selected\r\nand can change something (e.g., to apply an authorization policy) before `EndpointMiddleware` dispatches to the selected endpoint.\r\n\r\n\r\n#### Authentication/Authorization (UseAuthentication, UseAuthorization)\r\n\r\nThese two middlewares are added in the `Configure` because of the Authentication option we turned on when we created our project.\r\nAs already mentioned above, they already know which endpoint is selected and so can add some additional identity-related information to the request’s context (like filling its `User` property) or redirect to the “sign-in/sign up” pages if the current request is anonymous but the selected endpoint requires authorization.\r\n\r\n## Wrapping Up\r\n\r\nSo, in this article, I tried to cover all pieces of one of the most-used ASP.NET Core application templates and figure out why they are used and how they work (from a very general point of view).\r\n\r\nI hope this information will help you better understand the internal mechanism of the ASP.NET Core framework and make your code more clear and efficient.\r\n\r\nThanks for the reading, and take care!"},{"slug":"dotnet-vs-java-what-development-platform-better","title":".NET vs Java - Which Platform Is Better for Your Software Developer Career?","description":"Choosing a framework is not easy when you start reflecting on your future as a software developer, especially if you are a newbie","date":"2020-05-01T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport appOfJavaImage from \"../../images/blog/applications-of-java.png\"\r\nimport dotNetImage from \"../../images/blog/dotnet5_platform.png\"\r\nimport dotModelImage from \"../../images/blog/dotnet-application-models.png\"\r\nimport dotScheduleImage from \"../../images/blog/dotnet_schedule.png\"\r\n\r\nChoosing a framework is not easy when you start reflecting on your future as a software developer, especially if you are a newbie.\r\nMastering any programming language takes long hours and an effort you don’t want to waste.\r\nAnd it’s stressful to think that the wrong option might lead you to a job where you will have to change your knowledge base again.\r\n\r\nOk, let’s switch to the positive side.\r\nSince you are here, your options are narrowed down to these two: Java or .NET.\r\nThat’s already a huge move forward.\r\nBoth options are already a kind of win.\r\nJava and .NET are both well-established and are used for enterprise-level development.\r\nThat means you might land a job at a huge company with lots of resources and opportunities.\r\n\r\nLet’s take a quick look at the job market.\r\nAs of April 2020, Monster.com lists more than 41k jobs for “Java Developer” and 8.5k for “.NET Developer.”\r\nAccording to Glassdoor, the average salary estimation for a Java developer (irrespective of level and location) is about USD 79k and USD 76.5k for an ASP.NET/C# developer.\r\n\r\nDon’t be too fast with the conclusions though.\r\nNext, you might want to know which of the two is better for you personally and is more relevant to the future of technologies.\r\nLet’s have a closer look at both options.\r\n\r\n\r\n## Old-school Java\r\n\r\nAt the moment, Java is one of the most popular technologies worldwide.\r\nIt often ranks first in various ratings, and this is probably the main reason developers stick to it. The technology was created in 1995.\r\n\r\nIt is relatively easy to learn, and there are many free training resources available.\r\nIn addition, there is an enormous community that can help a newbie through the learning process.\r\nJava is suitable for almost every type of project: web applications, mobile apps, cloud computing, etc.\r\n\r\n<Image src={appOfJavaImage} alt=\"Applications of Java\" />\r\n\r\nJava is a free technology, as is the Oracle JDK (Java Development Kit), or Oracle OpenJDK, that’s used to create software in Java.\r\nIt also makes it possible to work with other programming languages, such as Kotlin, Groovy, or Scala, which would be relatively easy to learn as an addition. And as we have just pointed out, the job market is full of offers for Java developers from all over the planet. Sound good?\r\n\r\nBut hold on — there is a slippery slope under any ideal image. Some downsides include:\r\n\r\n### Licesing mess\r\n\r\nMaybe you think that you will start your way in Java by writing a small \"Hello World\" program, right? Wrong.\r\nToday, before you actually can learn Java itself, you first need to understand licensing on this platform.\r\nOtherwise, you may appear in a situation when you at first have to pay Oracle a couple of thousands of dollars for the licensing before delivering your work to the customer.\r\nTherefore, first, carefully study what Oracle JDK is and how it differs from Oracle Open JDK.\r\nAnd how they both differ from the community-led AdoptOpenJDK.\r\nWhat is Binary Code License and how much rights you have with [GPLv2+CPE license](http://openjdk.java.net/legal/gplv2+ce.html).\r\nSeveral official FAQs seem to explain the situation with licensing (one on [Oracle’s site](https://www.oracle.com/technetwork/java/javase/overview/oracle-jdk-faqs.html)\r\nand another one on [Java.com](https://java.com/en/download/faq/distribution.xml)) but make it even more confusing.\r\nIn addition, you can easily find a bunch of blog posts, queries on Quora (like \"Is Java still free\"), and even videos on this topic.\r\n\r\nThe question is: do you really want to deal with all this?\r\n\r\n\r\n### Legacy code\r\n\r\nMany long-standing companies have something written in Java.\r\nEventually, a young and passionate Java learner might end up on a job where they are working with an obsolete code instead of some new and prominent technology.\r\nFor example, a library a company has been accumulating for 20 odd years might be too expensive and time-consuming to modernize.\r\n\r\n\r\n### High competition\r\n\r\nIn addition to the huge number of vacancies, there’s an even bigger number of candidates.\r\nThat’s because virtually everyone who studies all the ratings sees Java in the top positions — and here we go!\r\nAnother thousand newbie learners opt for Java.\r\n\r\n\r\n## A More Promising Option: the .NET Framework\r\n\r\nThere is another very popular free open-source developer platform that can serve you better — .NET. Here is why it may be more promising for you.\r\n\r\n<Image src={dotNetImage} alt=\".NET 5 platform overview\" />\r\n\r\nSource: https://devblogs.microsoft.com/dotnet/introducing-net-5/\r\n\r\n### 1. Free, open, and cross-platform\r\n\r\nInterestingly enough, about five to six years ago all the features mentioned in the previous section would have made Java a better option,\r\nas .NET was then fully controlled by Microsoft and ran only on Windows.\r\n\r\n__This situation has completely changed in the last few years.__\r\n\r\nThe tables have turned, and now Java is becoming more closed off under Oracle guidance, while the approach of Microsoft is quite the opposite.\r\n.NET now is an [open-source platform with no licensing costs](https://dotnet.microsoft.com/platform/free).\r\nThey claim freedom for developers as one of the platform’s core values.\r\nFor the time being, Microsoft seems to practice what they preach.\r\n\r\nThe latest version of the .NET platform — .NET Core — is compatible with all the major operating systems: Windows, Linux, and iOS. There are basic .NET tools open for immediate use and lots of add-ons for building and editing apps, as well as third-party tools. Multiple libraries built specifically for .NET make the development process even more comfortable.\r\n\r\n\r\n### 2. All application types\r\n\r\nThe .NET framework (and its Core edition in particular) allow you to develop almost any kind of application,\r\nbe it an enterprise-level web app, desktop or mobile software, gaming project, or even an IoT service or an AI solution.\r\n\r\n\r\nWith the advent of the WebAssembly technology and [Blazor framework](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor),\r\n.NET can be used even for building client-side applications running in a browser — web apps where both client and server-side code is written in C#, thus eliminating the need to use JavaScript.\r\n\r\n<Image src={dotModelImage} alt=\".NET 5 application models\" />\r\n\r\nSource: https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet\r\n\r\n\r\n### 3. Quick progress and regular updates\r\n\r\nThe .NET framework has been constantly evolving throughout its 20-year history.\r\nBut in the last four to five years, the pace of its progress has increased significantly.\r\n\r\nSince the initial release of .NET Core back in 2016, we have received a major update almost once per year.\r\n\r\nIn November 2020 Microsoft plans to release another big update to the platform — .NET 5.\r\nIt is supposed to take the best of the previous versions and become a united platform for all the development tasks.\r\nMoreover, at its annual conference in 2019 Microsoft introduced [a roadmap for the .NET platform](https://medium.com/capgemini-dynamics-365-team/future-of-net-net-5-microsoft-build-2019-from-a-net-developer-point-of-view-7a1158fb0691)\r\nthat gives a clear understanding of what to expect and when.\r\n\r\n<Image src={dotScheduleImage} alt=\".NET Schedule\" />\r\n\r\nSource: https://devblogs.microsoft.com/dotnet/introducing-net-5/\r\n\r\n\r\n### 4. Great performance\r\n\r\nFor years, the applications created either with Java or on .NET/C# had a similar level of performance.\r\nHowever, Microsoft and many third-party contributers have made some significant investments in the optimization of this aspect and continues to improve.\r\nFor example, the ASP.NET Core web framework allows you to serve [7 million requests per second on a single server](https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/).\r\nAnd according to [TechEmpower tests](https://www.techempower.com/benchmarks/#section=data-r18&hw=ph&test=json), ASP.NET Core is way ahead of any Java web framework.\r\n\r\nHere's another good demonstration of the performance that can be achieved on the .NET platform —\r\n[an example of a super-fast network driver written in different languages](https://github.com/ixy-languages/ixy-languages).\r\nThe driver written in C# shows almost the same level of performance as C and Rust, slightly better than the Go language, and way ahead of all other high-level languages, including Java.\r\n\r\n### 5. C# — modern and versatile\r\n\r\n.NET was initially designed to support many programming languages.\r\nThe most widely employed among them are C# (pronounced “see sharp”) and F# (which offers a more functional approach).\r\n\r\nThe most popular and loved is definitely C# — a general-purpose and object-oriented programming language.\r\nIt is easy to learn and is widely used for all kinds of software development, from enterprise-level solutions to low-level IoT and gaming projects.\r\nIt makes simple many features that are overly complicated in Java.\r\n\r\nDespite its long history, C# keeps up with the times.\r\nA lot of features, such as LINQ queries, lambda expressions, asynchronous operations with async/await, and others were introduced in C# way ahead of other programming languages. Java still doesn’t have many features that were available in C# for years.\r\n\r\n## .NET Limitations\r\n\r\nJust like we said about Java, there is always a downside to any ideal picture.\r\nWith .NET, it is still not good enough for the client-side development.\r\nJavaScript is still considered the best option.\r\nThe same goes for the ML (Machine Learning) and NLP (Natural Language Processing) applications. Here Python is number one.\r\n\r\n\r\n## Wrap Up\r\n\r\nThe choice between Java and .NET is one between two solid enterprise-level development options.\r\nThough Java now ranks number one in all the ratings, it is highly competitive in terms of the job market and slow in terms of relevant updates.\r\n\r\nThe other option — .NET — is an open-source object-oriented solution that can be used for developing all sorts of applications, and it has a clear roadmap for the future.\r\nIn 2020 there will emerge .NET 5, an update that will unite all the best features of the previous .NET versions.\r\nThis makes learning a well-structured, easy, and modern technology even more attractive.\r\n\r\n### Useful links:\r\n\r\n* Looking for a job as a .NET developer? <br />\r\nUse [Jooble](https://jooble.org/jobs-.net-developer) to post your CV and start getting job offers.\r\n\r\n* Need to implement CRUD (create, read, update, delete) operations in your ASP.NET Core project and don't know where to start? <br />\r\n[EasyData open-source library](https://github.com/KorzhCom/EasyData) to the rescue! With EasyData you can get full CRUD functionality in just 10 minutes and with just a few lines of code.\r\n\r\n* What to improve the user experience of your DB-related .NET application? <br />\r\n[EasyQuery framework](https://korzh.com/easyquery?utm_source=blog&utm_medium=content&utm_campaign=net_vs_java) can help you to implement custom search, data-filtering, reporting, data exporting (to CSV, Excel, PDF), and many other tasks that commonly arise in data management solutions.\r\n\r\n"},{"slug":"dependency-injection-explanation-in-simple-words","title":"Dependency Injection Put Simply","description":"The concept of Dependency Injection can look over complicated especially for beginners. Here, I have tried to explain it by using a very simple example from the real world: a food delivery app on your mobile phone","date":"2020-01-08T00:00:00.000Z","body":"\r\nimport {Image} from \"astro:assets\";\r\nimport menuImage from \"../../images/blog/di-interfaces-as-menu.png\"\r\nimport schemaImage from \"../../images/blog/dependency-injection-schema.png\"\r\n\r\nThe concept of Dependency Injection can look over complicated especially for beginners. Here, I have tried to explain it by using a very simple example from the real world: a food delivery app on your mobile phone.\r\n\r\nSo, imagine you open such an app on your smartphone. Let’s see what we have here:\r\n\r\n## Menu (interfaces)\r\n\r\n<Image src={menuImage} alt=\"DI concepts: intefaces are like items in a cafe menu\" />\r\n\r\nPhoto by <a href=\"https://unsplash.com/@elizagalevi23?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Levi Elizaga</a> on <a href=\"https://unsplash.com/s/photos/menu?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>\r\n\r\nObviously, this app has a menu with a description of each item available there. To make it more similar to the Dependency Injection (DI) container let’s suppose all items on the menu are more or less generic. So, you have such options as a burger, chips, green salad, a soda drink, coffee, etc. However, you don’t know what meat is used for that burger, how exactly those chips are cooked, and what is the exact soda drink you will get.\r\nThese menu items are your __interfaces__. They describe the main characteristics of each snack but don’t bother you with the exact implementation.\r\n\r\n## Actual snacks (implementations)\r\n\r\nThen, you have the actual snacks which are delivered to you when you place an order. These are the __implementations__ of your interfaces.\r\nObviously, the implementations can differ depending on which particular restaurant they are delivered from.\r\n\r\n## Delivery (injection)\r\n\r\nNow, let’s suppose that your app, in some magical way, has a zero-time delivery function (OK, almost zero-time).\r\nSo, at whatever place you are now (whatever part of your project), you select the items you need, press the “Order” button, and the chosen snacks instantly appear in your hands.\r\nWe can say that they are __injected__ to the place where you are now :)\r\nMoreover, if a snack (like breakfast or combo-meal) depends on other snacks, those dependant snacks are created automatically and also “injected” into your combo-meal.\r\nFor example, a Big Mac Combo Meal includes a BigMac burger, some fries, and a drink. You don’t need to order them separately. They will all be created and delivered to you automatically.\r\n\r\n## Providers\r\n\r\nNow let’s suppose you can choose which restaurant will deliver your snacks.\r\nYou can choose either it will be a McDonald’s or Burger King or your favorite cafe nearby.\r\n\r\nMoreover, you can also choose the type of food (with meat, fish only, vegetarian, kosher, etc).\r\nSo, now you can still order a burger but if you selected “vegetarian”,\r\nour magical app will deliver to you a burger with soy meat or a burger made from that cultured meat popular nowadays.\r\n\r\nThe main point here is this: with this app, you can easily change the actual provider (so, the implementation)\r\nof your snacks without changing the simplicity and convenience of the whole process.\r\n\r\n## Wrapping up\r\n\r\n<Image src={schemaImage} alt=\"Dependency Injection Schema\" />\r\n\r\nYour food delivery app here is a __Dependency Injection (DI) Container__. The menu items are __interfaces__ of the services you might need somewhere in your project.\r\nThe actual snacks are the __implementations__ (actual classes that implement those services).\r\nWhen you need your some snacks (__services__) you tell your app (__DI container__) what you need and they are delivered (__injected__ in the place you are now) to you immediately.\r\n\r\nYou may ask, why DI does matter? What is so special about this concept that has made it so popular?\r\n\r\nAs you can see from this real-word example, dependency injection has a lot of benefits.\r\nLet’s list the most important ones (again, with a real-world example for each of them):\r\n\r\n1.  __Simplicity__\r\nWith DI, you don’t need to write a lot of code just to create an object of a particular class.\r\nEspecially when this object requires several other objects for its work (like a combo-meal in our example).\r\nYou just “tell” your DI container (your food delivery app) what you need and it’s delivered to you right away.\r\n\r\n2. __Maintainability__\r\nn terms of code, your classes become loosely coupled (each of the classes is less dependent on the concrete implementations of other classes),\r\nso your code will be easier to maintain.\r\nIn terms of our food delivery app, it’s easier to maintain one app and order (inject) necessary snacks,\r\ninstead of thinking where to buy all the ingredients for each of them and then cook everything yourself.\r\n\r\n3. __Flexibility__\r\nWith DI, your code becomes loosely coupled and so, more flexible, since you depend on interfaces and it’s very easy to replace the implementation.\r\nFor example, you have a repository interface for storing data about users.\r\nThe initial implementation of this repository will save the data to files. After that, you can decide to use the database.\r\nThe implementation of the repository is changed but all the code that uses it remains the same.\r\nIt’s similar to how you switch the provider of the snacks (or the preferred type of food) in your app. The process of order and delivery remains the same, you just start getting other snacks.\r\n\r\n## Conclusions\r\n\r\nAs you can see, Dependency Injection is a very useful and convenient technique,\r\nthe main principles of which can be applied not only in coding but in some real-world situations.\r\nIn terms of programming, you get more maintainable, more readable, more flexible, and more extensible code.\r\nThese are good enough reasons to get better acquainted with this technology and start using it in your projects.\r\n"},{"slug":"add-extra-user-claims-aspnet-core-webapp","title":"Add extra user claims in ASP.NET Core webapp","description":"So, the code in the following articles was built for and tested with ASP.NET Core 2.2. The main concept, however, is still the same and were not changed since ASP.NET Identity 2.0 (I guess)","date":"2019-05-07T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport claim01Image from \"../../images/blog/anc22-add-extra-claim01.png\"\r\nimport claim02Image from \"../../images/blog/anc22-add-extra-claim02.png\"\r\nimport claim03Image from \"../../images/blog/anc22-add-extra-claim03.png\"\r\n\r\n## Introduction\r\n\r\nThis is a second edition of the [previous post on the same topic](aspnet-identity-store-user-data-in-claims). The reason why I wrote this one is because of some drastic changes made in ASP.NET Core Authentication system from version 2.0 to version 2.2 - so most of the code presented in the first article doesn't work with the new version.\r\n\r\nSo, the code in the following articles was built for and tested with ASP.NET Core 2.2. The main concept, however, is still the same and were not changed since ASP.NET Identity 2.0 (I guess).\r\n\r\nAs in the previous case, we will start with a description of the problem.\r\n\r\n## Problem\r\n\r\nLet's suppose we created a new ASP.NET Core project using one of the default templates and chose \"Individual user account\" option for \"Authentication\".\r\n<Image src={claim01Image} alt=\"ASP.NET Core - new webapp project with an authentication\" />\r\n\r\nNow when we start that newly created project and register new user we will see something like `Hello YourEmailAddress@YourCompany.com` in the top right part of the index web-page.\r\n\r\nObviously, such kind of greeting is useless in a real-world application and you would like to see the name of the currently logged user there instead (e.g. `Hello John Doe`).\r\nLet's figure out how to do it.\r\n\r\n## Solution\r\n\r\nHere we guess you are already familiar with the claims and [claims-based approach](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims) for authorization used in ASP.NET Core Identity. If not - please read [ASP.NET Core Security](https://docs.microsoft.com/en-us/aspnet/core/security/) article first.\r\n\r\nTo achieve our goal we need to do 2 things:\r\n\r\n1. Add necessary information to the list of the claims attached to the user's identity.\r\n2. Have a simple way of getting that info when needed.\r\n\r\nBut before implementing these two tasks we will need to add a new ContactName field to our model class and update our registration and user management pages accordingly.\r\n\r\n## Step 0: Preparations\r\n\r\nBefore we can add a new claim to a user object (the one you can access via `HttpContext.User`) we need a place to store that additional info somewhere.\r\nHere I am going to describe how to get this done for a new ASP.NET Core project built by a default template.\r\n\r\nIf already you work with your real-world application - you most probably already did similar changes before.\r\nIn this case, you can skip this section and move right to the step #1.\r\n\r\n### 0.1 New ApplicationUser class\r\n\r\nAdd a new  `ApplicationUser` class with `ContactName' property:\r\n\r\n```csharp\r\npublic class ApplicationUser : IdentityUser\r\n{\r\n    public string ContactName { get; set; }\r\n}\r\n```\r\n\r\nOf course, you can add more properties to store some additional information with the user account.\r\nFor example: `FirstName`, `LastName`, `Country`, `Address`, etc. All of them can be placed to claims the same way as `ContactName` we discuss here.\r\n\r\n### 0.2 Replace `IdentityUser` with `ApplicationUser`\r\n\r\nNow you need to replace `IdentityUser` with `ApplicationUser` everywhere in your project.\r\n\r\nThe default ASP.NET Core template uses predefined `IdentityUser` type everywhere.\r\nSince we what to use `ApplicationUser` instead of it - we need to search for all inclusions of `IdentityUser` in your project and replace with `ApplicationUser`.\r\n\r\nIt will include your DbContext class, one line in `Startup` class (in `ConfigureServices` method) and two lines with `@inject` directives in `_LoginPartial.cshtml` view.\r\n\r\nHere is how your new `ApplicationDbContext` class will look like after that:\r\n\r\n```csharp\r\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, IdentityRole, string>\r\n{\r\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n### 0.3. Update your database.\r\n\r\nNow you need to add a new migration and then update your DB.\r\nJust run the following 2 commands from your project's folder:\r\n\r\n```shell\r\ndotnet ef migrations add AddUserContactName\r\n\r\ndotnet ef database update\r\n```\r\n\r\n### 0.4. Update \"User Profile\" page\r\n\r\nFinally, we will need to add our new field to the \"User Profile\" page to make it possible for users to modify it.\r\n\r\nThe default ASP.NET Core template uses all identity-related pages directly from a special Razor UI library (`Microsoft.AspNetCore.Identity.UI`).\r\nThe good news is: we can override any of those pages if we want. Here are the steps we need to do:\r\n\r\n1. Right-click on your project in VS and select Add | New Scaffolding item.\r\n\r\n2. In the \"Add Scaffold\" dialog select `Identity` on the left side tree and then `Identity` in the main list and click \"Add\".\r\n\r\n3. In the dialog that appears select only `Account\\Manage\\Index` page and then click on \"Add\" as well.\r\nWhen the process is finished you will find a new page 'Index.cshtml' in `Areas/Identity/Pages` folder.\r\n\r\n4. After that make the following changes to that `Index` page:\r\n\r\nIn the Index.cshtml itself add the following piece of markup right before `update-profile-button` button.\r\n\r\n```html\r\n<div class=\"form-group\">\r\n    <label asp-for=\"Input.ContactName\"></label>\r\n    <input asp-for=\"Input.ContactName\" class=\"form-control\" />\r\n    <span asp-validation-for=\"Input.ContactName\" class=\"text-danger\"></span>\r\n</div>\r\n```\r\n\r\nThen, in the code-behind file `Index.cshtml.cs` we need to modify the view model:\r\n\r\n```csharp\r\npublic class InputModel\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    public string ContactName { get; set; }\r\n}\r\n```\r\n\r\nthen the `OnGetAsync` method:\r\n\r\n```csharp\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    Input = new InputModel\r\n\t{\r\n\t\tEmail = email,\r\n\t\tPhoneNumber = phoneNumber,\r\n\t\tContactName = user.ContactName //add this line\r\n\t};\r\n\r\n    .   .   .   .   .   .\r\n\r\n}\r\n```\r\n\r\nand the `OnPutAsync`:\r\n\r\n```csharp\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    .    .    .    .    .    .    .\r\n\r\n\tif (Input.ContactName != user.ContactName) {\r\n\t\tuser.ContactName = Input.ContactName;\r\n\t\tawait _userManager.UpdateAsync(user);\r\n\t}\r\n\r\n\tawait _signInManager.RefreshSignInAsync(user);\r\n\tStatusMessage = \"Your profile has been updated\";\r\n\treturn RedirectToPage();\r\n}\r\n```\r\n\r\nSo, after all the changes described above your User Profile page after that registration will look like this:\r\n\r\n<Image src={claim02Image} alt=\"User Profile form with ContactName field\" />\r\n\r\nNow, all the preparations are finished we can return back to our main task.\r\n\r\n\r\n## Step 1: Adding the contact name to the claims\r\nA funny thing: the main task is much easier than all the preparations we made before. :)\r\nMoreover, it became even easier because of some changes in version 2.2 of ASP.NET Core (in comparison with version 2.0 as [we described before](../2019-05-07-add-extra-user-claims-aspnet-core-webapp/index.md) )\r\n\r\nThere are only two simple steps:\r\n\r\n### Create your own \"claims principal\" factory\r\n\r\nWe need an implementation `IUserClaimsPrincipalFactory` which will add necessary information (`ContactName` in our case) to the user claims.\r\nThe simplest way to do it - is to derive our new class from the default implementation of `IUserClaimsPrincipalFactory` and override one method: `GenerateClaimsAsync`:\r\n\r\n```csharp\r\npublic class MyUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser>\r\n{\r\n    public MyUserClaimsPrincipalFactory(\r\n        UserManager<ApplicationUser> userManager,\r\n        IOptions<IdentityOptions> optionsAccessor)\r\n        : base(userManager, optionsAccessor)\r\n    {\r\n    }\r\n\r\n    protected override async Task<ClaimsIdentity> GenerateClaimsAsync(ApplicationUser user)\r\n    {\r\n        var identity = await base.GenerateClaimsAsync(user);\r\n        identity.AddClaim(new Claim(\"ContactName\", user.ContactName ?? \"[Click to edit profile]\"));\r\n        return identity;\r\n    }\r\n}\r\n```\r\n\r\n### Register new class in DI container\r\n\r\nThen we need to register our new class in the dependency injection container.\r\nThe best way for that - to use `AddClaimsPrincipalFactory` extension method:\r\n\r\n```csharp\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .     .     .     .      .\r\n    services.AddDefaultIdentity<ApplicationUser>()\r\n        .AddDefaultUI(UIFramework.Bootstrap4)\r\n        .AddEntityFrameworkStores<ApplicationDbContext>()\r\n        .AddClaimsPrincipalFactory<MyUserClaimsPrincipalFactory>();  //<---- add this line\r\n}\r\n```\r\n\r\n## Step 2: Accessing new claim from the views\r\n\r\nNow we have a new claim associated with our user's identity. That's fine. But how we can get it and render on our view(s)?\r\nEasy. Any view in your application has access to `User` object which is an instance of `ClaimsPrincipal` class.\r\n\r\nThis object actually holds the list of all claims associated with the current user and you can call its `FindFirst` method to get the necessary claim and then read the `Value` property of that claim.\r\n\r\nSo, we just need to open `_LoginPartical.cshtml` file in `Pages/Shared/` (or `Views/Shared/`) folder and replace the following line:\r\n\r\n```html\r\n<a asp-area=\"\" asp-controller=\"Manage\" asp-action=\"Index\" title=\"Manage\">Hello @User.Identity.Name!</a>\r\n```\r\n\r\nwith this one:\r\n\r\n```html\r\n<a asp-area=\"\" asp-controller=\"Manage\" asp-action=\"Index\" title=\"Manage\">Hello @(User.FindFirst(\"ContactName\").Value)!</a>\r\n```\r\n\r\nNow, instead of something like `Hello john.doe@yourcompany.com` at the top of your web-page you should see something like this:\r\n\r\n<Image src={claim03Image} alt=\"ASP.NET Core - showing user's contact name instead of email\" />\r\n\r\nThat's all for now. Enjoy!"},{"slug":"embedded-resources-testing-projects","title":"Using embedded resources in testing projects","description":"Quite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions","date":"2018-05-30T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport protectImage from \"../../images/blog/vs-project-embres.png\"\r\n\r\nQuite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions.\r\n\r\nThe solution is quite simple:\r\n\r\n1. You put necessary files to some folder of your testing project (e.g. `Resources`)\r\n\r\n2. Mark them as \"Embedded Resource\"\r\n\r\n3. After that, you can access any of these resources in any place of your testing module.\r\n\r\nHere is an example of a resource file included in your testing project:\r\n<Image src={protectImage} alt=\"\" />\r\n\r\n\r\nHere is a static class with extension functions which may help you on step #3:\r\n\r\n```csharp\r\npublic static class ResourceUtils\r\n{\r\n\tpublic static Stream GetResourceStream(this Assembly assembly, string resourceFolder, string resourceFileName)\r\n\t{\r\n\r\n\t\tstring[] nameParts = assembly.FullName.Split(',');\r\n\r\n\t\tstring resourceName = nameParts[0] + \".\" +  resourceFolder + \".\" + resourceFileName;\r\n\r\n\t\tvar resources = new List<string>(assembly.GetManifestResourceNames());\r\n\t\tif (resources.Contains(resourceName))\r\n\t\t\treturn assembly.GetManifestResourceStream(resourceName);\r\n\t\telse\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\tpublic static string GetResourceAsString(this Assembly assembly, string folder, string fileName)\r\n\t{\r\n\t\tstring fileContent;\r\n\t\tusing (StreamReader sr = new StreamReader(GetResourceStream(assembly, folder, fileName))) {\r\n\t\t\tfileContent = sr.ReadToEnd();\r\n\t\t}\r\n\t\treturn fileContent;\r\n\t}\r\n\r\n\tpublic static Stream GetResourceStream(this Type type, string resourceFolder, string resourceFileName)\r\n\t{\r\n\t\tvar assembly = type.GetTypeInfo().Assembly;\r\n\t\treturn assembly.GetResourceStream(resourceFolder, resourceFileName);\r\n\t}\r\n\r\n\tpublic static string GetResourceAsString(this Type type, string folder, string fileName)\r\n\t{\r\n\t\tvar assembly = type.GetTypeInfo().Assembly;\r\n\t\treturn assembly.GetResourceAsString(folder, fileName);\r\n\t}\r\n}\r\n\r\npublic class ResourceUtilsException : Exception {\r\n\tpublic ResourceUtilsException(string message) : base(message) { }\r\n}\r\n```\r\n\r\nTo make it even simpler - we put these and some other functions to a [Nuget package](https://www.nuget.org/packages/Korzh.Utils/) you can reference in your project.\r\n\r\nFinally, here is how your testing function will access the resource file defined on the first step:\r\n\r\n```csharp\r\n[TestMethod]\r\npublic void TestMethod1() {\r\n\tstring xml = typeof(UnitTest1).GetResourceAsString(\"Resources\", \"XMLFile1.xml\");\r\n\t.    .    .    .    .    .\r\n}\r\n```\r\n(here, for the `typeof` function parameter you use any class from the same assembly where your resources are placed)\r\n\r\nEnjoy!\r\n"},{"slug":"aspnet-identity-master-password","title":"ASP.NET Identity - Adding master password","description":"Sometimes, when you build a multi-tenant web-application you may need to set up a \"master password\" to your system - the password which allows some administrator to login to any user's account. Something similar to `su` command in Unix/Linux systems","date":"2018-04-08T00:00:00.000Z","body":"## Problem\r\n\r\nSometimes, when you build a multi-tenant web-application you may need to set up a \"master password\" to your system - the password which allows some administrator to login to any user's account. Something similar to `su` command in Unix/Linux systems.\r\n\r\n## Solution\r\n\r\nAs with the [previous task](aspnet-identity-migrate-membership-passwords), the solution is quite simple - thanks to the power and flexibility of ASP.NET Core application architecture.\r\n\r\nWe just need to create a new implementation of `IPassowrdHasher` interface and register it in dependency injection container:\r\n\r\n\r\n```csharp\r\n//PasswordHasherWithMasterPassword.cs\r\n.   .   .   .   .   .\r\npublic class PasswordHasherWithMasterPassword : IPasswordHasher<ApplicationUser>\r\n{\r\n\tprivate IPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\r\n\r\n\tprivate static string _masterPassword = \"qwerty12345\";\r\n\r\n    public PasswordVerificationResult VerifyHashedPassword(ApplicationUser user, string hashedPassword, string providedPassword) {\r\n\t\tif (providedPassword == _masterPassword) {\r\n\t\t\t\treturn PasswordVerificationResult.Success;\r\n\t\t}\r\n\r\n        return _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\r\n\t}\r\n}\r\n\r\n\r\n//Startup.cs\r\n.   .   .   .   .   .\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithMasterPassword>();\r\n}\r\n```\r\n\r\n"},{"slug":"aspnet-identity-migrate-membership-passwords","title":"ASP.NET Identity - Migrating users' passwords from ASP.NET Membership","description":"This task usually appears when you need to transfer your old MVC web application to ASP.NET Core. If you use MVC version 3 or 4 and your application provides a user authentication service, then most likely this part is done with the old ASP.NET Membership library","date":"2018-02-22T00:00:00.000Z","body":"\r\nThis is a third part of the series of articles about some not-so-well-known features and tricks in ASP.NET Identity.\r\nHere are you can find the [first](../2019-05-07-add-extra-user-claims-aspnet-core-webapp/index.md) and the [second](aspnet-identity-weakening-password-policies) parts.\r\n\r\n## Problem\r\n\r\nThis task usually appears when you need to transfer your old MVC web application to ASP.NET Core. If you use MVC version 3 or 4 and your application provides a user authentication service, then most likely this part is done with the old ASP.NET Membership library.\r\n\r\nSo, imagine you have a bunch of users, each of them has some password and the hash of that password stored in some database. Now you need to transfer all your current users to the new system built with ASP.NET Core.\r\nOf course, it's not a big problem to transfer their names, addresses, and other information. The problem is in those password hashes. ASP.NET Core Identity uses another hashing algorithm so all current users will not be able to access the system with their old passwords - the hashes will not match.\r\n\r\n## Solution\r\nThe solution is rather simple: we need to rewrite the default hashing service in ASP.NET Core Identity and make it \"understand\" both the old and new hashes.\r\n\r\nHere is our class which implements `IPassowrdHasher` interface:\r\n\r\n```csharp\r\npublic class PasswordHasherWithOldMembershipSupport : IPasswordHasher<ApplicationUser>\r\n{\r\n\t//an instance of the default password hasher\r\n\tIPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\r\n\r\n\t//Hashes the password using old algorithm from the days of ASP.NET Membership\r\n\tinternal static string HashPasswordInOldFormat(string password)\r\n\t{\r\n\t\tvar sha1 = new SHA1CryptoServiceProvider();\r\n\t\tvar data = Encoding.ASCII.GetBytes(password);\r\n\t\tvar sha1data = sha1.ComputeHash(data);\r\n\t\treturn Convert.ToBase64String(sha1data);\r\n\t}\r\n\r\n\t//the passwords of the new users will be hashed with new algorithm\r\n\tpublic string HashPassword(ApplicationUser user, string password) {\r\n\t\treturn _identityPasswordHasher.HashPassword(user, password);\r\n\t}\r\n\r\n\tpublic PasswordVerificationResult VerifyHashedPassword(ApplicationUser user,\r\n\t\t\t\tstring hashedPassword, string providedPassword)\r\n\t{\r\n\t\tstring pwdHash2 = HashPasswordInOldFormat(providedPassword);\r\n\r\n\r\n\t\tif (hashedPassword == pwdHash2) {\r\n\t\t\t//first we check the hashed password with \"old\" hash\r\n\t\t\treturn PasswordVerificationResult.Success;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//if old hash doesn't work - use the default approach\r\n\t\t\treturn _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAfter that we just need to register our new `IPasswordHasher` implementation in the DI container:\r\n\r\n\r\n```csharp\r\n//Startup.cs\r\n.   .   .   .   .   .\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithOldMembershipSupport>();\r\n}\r\n```"},{"slug":"aspnet-identity-weakening-password-policies","title":"ASP.NET Identity - Weakening password policies","description":"Since we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)","date":"2018-02-10T00:00:00.000Z","body":"\r\n> This is the second article in a series of articles about ASP.NET Core Identity.\r\n> You can find the first one [here](../2019-05-07-add-extra-user-claims-aspnet-core-webapp/index.md).\r\n\r\n## Problem\r\nLet's suppose you created a new ASP.NET Core with the default Authentication (like in [previous article](2018-01-22-ASP-NET-Identity-Use-claims-to-store-additional-users-data)).\r\nThen you run it and try to register a new user. On the registration form, we need to enter a password.\r\nSince we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)\r\n\r\nHowever, if you try to enter something simple like \"qwerty\" or your name - you will get the following bunch of error messages:\r\n* Passwords must have at least one non-alphanumeric character.\r\n* Passwords must have at least one digit ('0'-'9').\r\n* Passwords must have at least one uppercase ('A'-'Z').\r\n\r\nThe reason for all these validation errors is that by default ASP.NET Core Identity has very strong password policies for the users. In the error messages above you can see the constraints which must be satisfied.\r\n\r\n## Solution\r\nThe good news is that you can change these policies very easily, right in `Configure` method of your `Startup` class.\r\n\r\nAll you need to do is to use another version of `AddIdentity` method which accepts a lambda expression with `IdentityOptions` parameter.\r\nSo the following default code that initializes the Identity:\r\n\r\n```csharp\r\nservices.AddIdentity<ApplicationUser, IdentityRole>()\r\n\t.AddEntityFrameworkStores<ApplicationDbContext>()\r\n\t.AddDefaultTokenProviders();\r\n```\r\n\r\nshould be changed to the something like the following:\r\n\r\n```csharp\r\nservices.AddIdentity<ApplicationUser, IdentityRole>(options => {\r\n\toptions.Password.RequiredLength = 3;\r\n\toptions.Password.RequiredUniqueChars = 0;\r\n\toptions.Password.RequireLowercase = false;\r\n\toptions.Password.RequireUppercase = false;\r\n\toptions.Password.RequireDigit = false;\r\n\toptions.Password.RequireNonAlphanumeric = false;\r\n})\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\nThe options above are self-descriptive, so no additional explanations are required.\r\n\r\nOf course, it's not good to leave such kind of password strength policies in production mode. That's why it will be a good idea to turn all those options off only in Development mode.\r\n\r\nSo, to make it possible we will need to add two more modifications to our `Startup` class:\r\n\r\n```csharp\r\npublic IHostingEnvironment Environment { get; }\r\n\r\npublic Startup(IConfiguration configuration, IHostingEnvironment env)\r\n{\r\n    Configuration = configuration;\r\n    Environment = env;\r\n}\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .     .     .     .     .     .     .\r\n    services.AddIdentity<ApplicationUser, IdentityRole>(options => {\r\n        if (Environment.IsDevelopment()) {\r\n            options.Password.RequiredLength = 3;\r\n            options.Password.RequiredUniqueChars = 0;\r\n            options.Password.RequireLowercase = false;\r\n            options.Password.RequireUppercase = false;\r\n            options.Password.RequireDigit = false;\r\n            options.Password.RequireNonAlphanumeric = false;\r\n        }\r\n    })\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n   .     .     .     .     .     .     .\r\n}\r\n```\r\n"},{"slug":"aspnet-identity-store-user-data-in-claims","title":"ASP.NET Identity - Use claims to store additional user's data","description":"With this post, we start a series of articles that describe the different aspects of using ASP.NET Identity in your ASP.NET (Core) applications","date":"2018-01-22T00:00:00.000Z","body":"import {Image} from \"astro:assets\";\r\nimport newAppImage from \"../../images/blog/anc-identity-newapp01.png\"\r\nimport registrationImage from \"../../images/blog/anc-identity-registration.png\"\r\nimport contactImage from \"../../images/blog/anc-identity-contact-name.png\"\r\n\r\n\r\n> __NB__: The solution presented in this article will work in version 2.0 of ASP.NET Core only!\r\n> If you use a newer version of ASP.NET Core (e.g. 2.2) - here is a [new post on the same topic](add-extra-user-claims-aspnet-core-webapp).\r\n\r\n## Introduction\r\nWith this post, we start a series of articles that describe the different aspects of using ASP.NET Identity in your ASP.NET (Core) applications.\r\nAll the code in the following articles was built for and tested with ASP.NET Core 2.0. However, in most cases, it will work well in earlier versions of .NET framework (4.x) and ASP.NET Identity library (2.x)\r\n\r\nOne more note. We are NOT going to do an introduction to or describe the basic principles of ASP.NET Core in general or APS.NET Identity in particular. The following material is more for the developers who already have some experience with both of them. If you don't - please start by reading the tutorials on [ASP.NET Core documentation](https://docs.microsoft.com/en-us/aspnet/core/) website and creating your first web app with it.\r\n\r\n## Problem\r\nLet's suppose we created a new ASP.NET Core project using one of the default templates and chose \"Individual user account\" option for \"Authentication\".\r\n\r\n<Image src={newAppImage} alt=\"ASP.NET Core - new project with ASP.NET Identity\" />\r\n\r\nNow when we start that newly created project and register new user we will see something like `Hello YourEmailAddress@YourCompany.com` in the top right part of the index web-page.\r\n\r\nObviously, such kind of greeting is useless in a real-world application and you would like to see the name of the currently logged user there instead (e.g. `Hello John Doe`).\r\nLet's figure out how to do it.\r\n\r\n## Solution\r\nHere we guess you are already familiar with the claims and [claims-based approach](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims) for authorization used in ASP.NET Core Identity. If not - please read [ASP.NET Core Security](https://docs.microsoft.com/en-us/aspnet/core/security/) documentation first.\r\n\r\nTo achieve our goal we need to do 2 things:\r\n1. Add necessary information to the list of claims stored with the user's identity.\r\n2. Have a simple way of getting that info when needed.\r\n\r\nBut before implementing these two tasks we will need to add a new ContactName field to our model class and update our registration and user management pages accordingly.\r\n\r\n### 0. Preparations: ContactName property in ApplicationUser and updated views\r\nLet's add a new `ContactName` property to the ApplicationUser model class (you can find it in `Models` folder of your project):\r\n\r\n```csharp\r\npublic class ApplicationUser : IdentityUser {\r\n    public string ContactName { get; set; }\r\n}\r\n```\r\nOf course, you can add here some other properties you would like to store with your user's account, like `FirstName`, `LastName`, `Country`, `Address`, etc. but for simplicity, we will consider only one additional property.\r\n\r\nThe next step will be adding a new migration and updating your database.\r\nJust run the following commands from the terminal windows in your project's folder:\r\n\r\n```shell\r\ndotnet ef migrations add ContactNameField\r\n````\r\nand then\r\n```shell\r\ndotnet ef database update\r\n```\r\n\r\nFinally, we will need to add the new field to the views:\r\n\r\n1. `Models\\AccountViewModels\\RegisterViewModel.cs`\r\n```csharp\r\npublic class RegisterViewModel\r\n{\r\n    [Required]\r\n    [Display(Name = \"Name\")]\r\n    public string ContactName { get; set; }\r\n   .     .     .     .     .     .\r\n```\r\n\r\n2. `Views/Account/Register.chstml`\r\nAdd the following piece of markup before `Email` form group\r\n```html\r\n<div class=\"form-group\">\r\n    <label asp-for=\"ContactName\"></label>\r\n    <input asp-for=\"ContactName\" class=\"form-control\" />\r\n    <span asp-validation-for=\"ContactName\" class=\"text-danger\"></span>\r\n</div>\r\n````\r\n\r\n3. `Controllers/AccountController`\r\nUpdate the following line in the Register method:\r\n\r\n```csharp\r\nvar user = new ApplicationUser { ContactName=model.ContactName, UserName = model.Email, Email = model.Email };\r\n```\r\n\r\nAfter that, perform the similar steps in\r\n- `View/Manage/Index.cshtml`,\r\n- `Models/ManageViewModels/IndexViewModel.cs`\r\nand in\r\n- `Index` method in `ManageControler` class.\r\n\r\nTry to run your project and open the registration page. Now it should look this way:\r\n\r\n<Image src={registrationImage} alt=\"Registration form with ContactName field\" />\r\n\r\nNow, when all the preparations are finished we can return back to our main tasks.\r\n\r\n### 1. Adding a user's name to the claims\r\nIt appears that the main task is much easier than all the preparations we made before. :)\r\n\r\nThe quickest way to add some additional claims to the user's identity is to create your own implementation of `IUserClaimsPrincipalFactory` and register it in DI container.\r\n\r\nHere is the implementation of `IUserClaimsPrincipalFactory` which adds the value stored in `ContactName` property to the user's claims:\r\n\r\n```csharp\r\npublic class MyUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser, IdentityRole>\r\n{\r\n    public MyUserClaimsPrincipalFactory(\r\n        UserManager<ApplicationUser> userManager,\r\n        RoleManager<IdentityRole> roleManager,\r\n        IOptions<IdentityOptions> optionsAccessor)\r\n        : base(userManager, roleManager, optionsAccessor) {\r\n    }\r\n\r\n    protected override async Task<ClaimsIdentity> GenerateClaimsAsync(ApplicationUser user) {\r\n        var identity = await base.GenerateClaimsAsync(user);\r\n        identity.AddClaim(new Claim(\"ContactName\", user.ContactName ?? \"\"));\r\n        return identity;\r\n    }\r\n}\r\n```\r\n\r\nAnd then register it in DI container in `ConfigureServices` methods of your Startup class:\r\n\r\n```csharp\r\npublic void ConfigureServices(IServiceCollection services) {\r\n    .     .     .     .      .\r\n    services.AddIdentity<ApplicationUser, IdentityRole>()\r\n        .AddEntityFrameworkStores<ApplicationDbContext>()\r\n        .AddDefaultTokenProviders();\r\n\r\n    //add the following line of code\r\n    services.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, MyUserClaimsPrincipalFactory>();\r\n    .     .     .     .      .\r\n}\r\n```\r\n\r\n### 2. Accessing new claim from the views\r\nNow we have a new claim associated with our user's identity. That's fine. But how we can get it and render on our view(s)?\r\nEasy. Any view in your application has access to `User` object which is an instance of `ClaimsPrincipal` class.\r\n\r\nThis object actually holds the list of all claims associated with the current user and you can call its `FindFirst` method to get the necessary claim and then read the `Value` property of the found claim.\r\n\r\nSo, we just need to open `_LoginPartical.cshtml` file in `Views/Shared/` folder and replace the following line:\r\n\r\n```html\r\n<a asp-area=\"\" asp-controller=\"Manage\" asp-action=\"Index\" title=\"Manage\">Hello @UserManager.GetUserName(User)!</a>\r\n```\r\nwith this one:\r\n\r\n```html\r\n<a asp-area=\"\" asp-controller=\"Manage\" asp-action=\"Index\" title=\"Manage\">Hello @(User.FindFirst(\"ContactName\").Value)!</a>\r\n```\r\nNow you instead of something like `Hello john.doe@yourcompany.com` at the top of your web-page you should see something like this:\r\n\r\n<Image src={contactImage} alt=\"ASP.NET Core - renderring contact name instead of user's ID\" />\r\n\r\n"},{"slug":"welcome","title":"Welcome to our Blog!","description":"Welcome to our blog! We are so exuberant to have you here! Our team is working hard to share inspiring stories, professional insights, and significant updates from our industry","date":"2018-01-01T00:00:00.000Z","body":"## Welcome to our blog! \r\n\r\nWe are so exuberant to have you here! Our team is working hard to share inspiring stories, professional insights, and significant updates from our industry.\r\n\r\nOur journey is led by incessant curiosity and an enthusiasm to share knowledge and ideas. We truly believe that everyone has something to learn and something to teach.\r\n\r\nIn this blog, we promise to bring you engaging content that stimulates curiosity and encourages you to explore. We will cover a range of topics, present unique perspectives, and open dialect on the latest trends in the software development.\r\n\r\nWe believe that the power of community is profound, so we encourage your comments, questions, and ideas on our posts. Let’s share, grow, and learn, together.\r\n\r\nStay tuned and happy reading! \r\nWith regards Korzh.com team!"}]